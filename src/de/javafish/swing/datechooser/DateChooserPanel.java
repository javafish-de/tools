package de.javafish.swing.datechooser;

import java.awt.*;
import java.text.*;
import java.util.*;
import javax.swing.*;

public class DateChooserPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private JFrame frame;
    private final DateFormat dateFormat;
    //
    // Die Properties
    //
    private Calendar calendar;
    private boolean disposeOnSingleClick;
    private Color borderBackground;
    private Color borderForeground;
    private Color headlineBackground;
    private Color headlineForeground;
    private Color weekBackground;
    private Color weekForeground;
    private Color weekendBackground;
    private Color weekendForeground;
    private Color dayBackground;
    private Color dayForeground;
    private Color startBackground;
    private Color startForeground;
    private Color activeBackground;
    private Color activeForeground;

    /**
     * Creates new form DateChooserPanel
     */
    public DateChooserPanel() {
        initProperties();
        initComponents();
        dateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM);
        showDate(new Date());
    }

    private void showDate(Date d) {
        calendar.setTime(d);
        txtDate.setText(dateFormat.format(calendar.getTime()));
    }
    
    private void initProperties() {
        calendar = Calendar.getInstance();
        disposeOnSingleClick = false;
        borderBackground = new Color(153, 153, 153);
        borderForeground = Color.BLACK;
        headlineBackground = Color.LIGHT_GRAY;
        headlineForeground = Color.BLACK;
        weekBackground = Color.DARK_GRAY;
        weekForeground = Color.WHITE;
        weekendBackground = new Color(255, 204, 204);
        weekendForeground = Color.BLACK;
        dayBackground = Color.WHITE;
        dayForeground = Color.BLACK;
        startBackground = new Color(153, 205, 255);
        startForeground = Color.BLACK;
        activeBackground = Color.LIGHT_GRAY;
        activeForeground = Color.BLACK;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDate = new javax.swing.JFormattedTextField();
        btnDate = new javax.swing.JButton();

        txtDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnDate.setText("D");
        btnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(txtDate, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnDate)
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDateActionPerformed
        Date oldDate = calendar.getTime();
        DateChooserDialog dc = new DateChooserDialog(frame, true);
        setProperties(dc);
        setLocation(dc);

        dc.setVisible(true);

        showDate(dc.getCalendar().getTime());
//        String s = dateFormat.format(calendar.getTime());
//        txtDate.setText(s);
        
        firePropertyChange("date", oldDate, calendar.getTime());
    }//GEN-LAST:event_btnDateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDate;
    private javax.swing.JFormattedTextField txtDate;
    // End of variables declaration//GEN-END:variables

    private void setProperties(DateChooserDialog dc) {

        // Start-Datum
        try {
            calendar.setTime(dateFormat.parse(txtDate.getText()));
            dc.setStartDate(dateFormat.parse(txtDate.getText()));
        } catch (ParseException ex) {
        }

        // Single- oder Double-Click
        dc.setDisposeOnSingleClick(disposeOnSingleClick);

        // Colors
        dc.setBorderBackground(borderBackground);
        dc.setBorderForeground(borderForeground);
        dc.setHeadlineBackground(headlineBackground);
        dc.setHeadlineForeground(headlineForeground);
        dc.setWeekBackground(weekBackground);
        dc.setWeekForeground(weekForeground);
        dc.setDayBackground(dayBackground);
        dc.setDayForeground(dayForeground);
        dc.setStartBackground(startBackground);
        dc.setStartForeground(startForeground);
        dc.setWeekendBackground(weekendBackground);
        dc.setWeekendForeground(weekendForeground);
        dc.setActiveBackground(activeBackground);
        dc.setActiveForeground(activeForeground);

        // activate Colors
        dc.setColors();
    }

    private void setLocation(DateChooserDialog dc) {
        Rectangle screenSize = getGraphicsConfiguration().getBounds();
        Point l = getLocationOnScreen();
        Dimension d = dc.getSize();

        l.y += 30;
        if (l.y + d.height > screenSize.height) {
            l.y -= 30 + d.height;
        }
        if ((l.x + d.width) > (screenSize.x + screenSize.width)) {
            int diff = (l.x + d.width) - (screenSize.x + screenSize.width);
            l.x -= diff + 20;
        }

        dc.setLocation(l);
    }

    /**
     * @return the frame
     */
    public JFrame getFrame() {
        return frame;
    }

    /**
     * @param frame the frame to set
     */
    public void setFrame(JFrame frame) {
        this.frame = frame;
    }

    /**
     * @return the disposeOnSingleClick 
     */
    public boolean isDisposeOnSingleClick() {
        return disposeOnSingleClick;
    }

    /**
     * @param disposeOnSingleClick the disposeOnSingleClick to set
     */
    public void setDisposeOnSingleClick(boolean disposeOnSingleClick) {
        this.disposeOnSingleClick = disposeOnSingleClick;
    }

    /**
     * @return the borderBackground
     */
    public Color getBorderBackground() {
        return borderBackground;
    }

    /**
     * @param borderBackground the borderBackground to set
     */
    public void setBorderBackground(Color borderBackground) {
        this.borderBackground = borderBackground;
    }

    /**
     * @return the borderForeground
     */
    public Color getBorderForeground() {
        return borderForeground;
    }

    /**
     * @param borderForeground the borderForeground to set
     */
    public void setBorderForeground(Color borderForeground) {
        this.borderForeground = borderForeground;
    }

    /**
     * @return the headlineBackground
     */
    public Color getHeadlineBackground() {
        return headlineBackground;
    }

    /**
     * @param headlineBackground the headlineBackground to set
     */
    public void setHeadlineBackground(Color headlineBackground) {
        this.headlineBackground = headlineBackground;
    }

    /**
     * @return the headlineForeground
     */
    public Color getHeadlineForeground() {
        return headlineForeground;
    }

    /**
     * @param headlineForeground the headlineForeground to set
     */
    public void setHeadlineForeground(Color headlineForeground) {
        this.headlineForeground = headlineForeground;
    }

    /**
     * @return the weekBackground
     */
    public Color getWeekBackground() {
        return weekBackground;
    }

    /**
     * @param weekBackground the weekBackground to set
     */
    public void setWeekBackground(Color weekBackground) {
        this.weekBackground = weekBackground;
    }

    /**
     * @return the weekForeground
     */
    public Color getWeekForeground() {
        return weekForeground;
    }

    /**
     * @param weekForeground the weekForeground to set
     */
    public void setWeekForeground(Color weekForeground) {
        this.weekForeground = weekForeground;
    }

    /**
     * @return the weekendBackground
     */
    public Color getWeekendBackground() {
        return weekendBackground;
    }

    /**
     * @param weekendBackground the weekendBackground to set
     */
    public void setWeekendBackground(Color weekendBackground) {
        this.weekendBackground = weekendBackground;
    }

    /**
     * @return the weekendForeground
     */
    public Color getWeekendForeground() {
        return weekendForeground;
    }

    /**
     * @param weekendForeground the weekendForeground to set
     */
    public void setWeekendForeground(Color weekendForeground) {
        this.weekendForeground = weekendForeground;
    }

    /**
     * @return the dayBackground
     */
    public Color getDayBackground() {
        return dayBackground;
    }

    /**
     * @param dayBackground the dayBackground to set
     */
    public void setDayBackground(Color dayBackground) {
        this.dayBackground = dayBackground;
    }

    /**
     * @return the dayForeground
     */
    public Color getDayForeground() {
        return dayForeground;
    }

    /**
     * @param dayForeground the dayForeground to set
     */
    public void setDayForeground(Color dayForeground) {
        this.dayForeground = dayForeground;
    }

    /**
     * @return the startBackground
     */
    public Color getStartBackground() {
        return startBackground;
    }

    /**
     * @param startBackground the startBackground to set
     */
    public void setStartBackground(Color startBackground) {
        this.startBackground = startBackground;
    }

    /**
     * @return the startForeground
     */
    public Color getStartForeground() {
        return startForeground;
    }

    /**
     * @param startForeground the startForeground to set
     */
    public void setStartForeground(Color startForeground) {
        this.startForeground = startForeground;
    }

    /**
     * @return the activeBackground
     */
    public Color getActiveBackground() {
        return activeBackground;
    }

    /**
     * @param activeBackground the activeBackground to set
     */
    public void setActiveBackground(Color activeBackground) {
        this.activeBackground = activeBackground;
    }

    /**
     * @return the activeForeground
     */
    public Color getActiveForeground() {
        return activeForeground;
    }

    /**
     * @param activeForeground the activeForeground to set
     */
    public void setActiveForeground(Color activeForeground) {
        this.activeForeground = activeForeground;
    }

    /**
     * @return the calendar
     */
    public Calendar getCalendar() {
        return calendar;
    }

    /**
     * @param calendar the calendar to set
     */
    public void setCalendar(Calendar calendar) {
        showDate(calendar.getTime());
//        this.calendar = calendar;
    }

    /**
     * @return the date
     */
    public Date getDate() {
        return calendar.getTime();
    }

    /**
     * @param date the date to set
     */
    public void setDate(Date date) {
        showDate(date);
//        this.calendar.setTime(date);
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        btnDate.setEnabled(enabled);
        txtDate.setEnabled(enabled);
    }
    
    
}
