package de.javafish.swing.datechooser;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

public class DateChooserDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;
    private static final int YEAR_BACK = 0;
    private static final int YEAR_NEXT = 1;
    private static final int MONTH_BACK = 2;
    private static final int MONTH_NEXT = 3;
    private static final int NEXT = 1;
    private static final int BACK = -1;
    
    /**
     * Das Datum.
     */
    private Date today;
    private Calendar calendar;
    private int month;
    private int year;
    //
    // Die Properties
    //
    private boolean disposeOnSingleClick;
    private Date startDate;
    private Color borderBackground;
    private Color borderForeground;
    private Color headlineBackground;
    private Color headlineForeground;
    private Color weekBackground;
    private Color weekForeground;
    private Color weekendBackground;
    private Color weekendForeground;
    private Color dayBackground;
    private Color dayForeground;
    private Color startBackground;
    private Color startForeground;
    private Color activeBackground;
    private Color activeForeground;
    //
    //
    private Thread shifterThread;
    
    /**
     * Erzeugt ein neues Dialogfenster von Typ DateChooserDialog.
     *
     * @param parent
     * @param modal
     */
    public DateChooserDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initProperties();
        initComponents();
        initDateChooser();
    }

    private void initProperties() {
        disposeOnSingleClick = false;
        today = new Date();
        calendar = Calendar.getInstance();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBorder = new javax.swing.JPanel();
        btnToday = new javax.swing.JButton();
        btnYearBack = new javax.swing.JButton();
        btnMonthBack = new javax.swing.JButton();
        lblMonthYear = new javax.swing.JLabel();
        btnMonthNext = new javax.swing.JButton();
        btnYearNext = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        pnlDays = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        pnlBorder.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnToday.setText("V");
        btnToday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodayActionPerformed(evt);
            }
        });

        btnYearBack.setText("<<");
        btnYearBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnYearBackMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnYearBackMouseReleased(evt);
            }
        });

        btnMonthBack.setText("<");
        btnMonthBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnMonthBackMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnMonthBackMouseReleased(evt);
            }
        });

        lblMonthYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMonthYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMonthYear.setText("Monat / Jahr");

        btnMonthNext.setText(">");
        btnMonthNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnMonthNextMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnMonthNextMouseReleased(evt);
            }
        });

        btnYearNext.setText(">>");
        btnYearNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnYearNextMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnYearNextMouseReleased(evt);
            }
        });

        btnClose.setText("X");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        pnlDays.setLayout(new java.awt.GridLayout(0, 8, 2, 2));

        javax.swing.GroupLayout pnlBorderLayout = new javax.swing.GroupLayout(pnlBorder);
        pnlBorder.setLayout(pnlBorderLayout);
        pnlBorderLayout.setHorizontalGroup(
            pnlBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBorderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlBorderLayout.createSequentialGroup()
                        .addComponent(btnToday)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnYearBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMonthBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMonthYear, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMonthNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnYearNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose))
                    .addComponent(pnlDays, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBorderLayout.setVerticalGroup(
            pnlBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBorderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnYearNext)
                    .addComponent(btnMonthNext)
                    .addComponent(lblMonthYear)
                    .addComponent(btnMonthBack)
                    .addComponent(btnYearBack)
                    .addComponent(btnToday)
                    .addComponent(btnClose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlDays, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBorder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBorder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTodayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodayActionPerformed
        Calendar cHelper = Calendar.getInstance();
        cHelper.setTime(today);
        if (calendar.get(Calendar.MONTH) != cHelper.get(Calendar.MONTH)
                || calendar.get(Calendar.YEAR) != cHelper.get(Calendar.YEAR)) {
            calendar.setTime(today);
            calendar.set(Calendar.DAY_OF_MONTH, 1);
            fillPanel();
        }
    }//GEN-LAST:event_btnTodayActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        calendar.setTime(getStartDate());
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void dayLabelMouseCLicked(java.awt.event.MouseEvent evt) {
        if (disposeOnSingleClick || evt.getClickCount() > 1) {
            int day = ((DayLabel) evt.getSource()).getDay();
            calendar.set(Calendar.DAY_OF_MONTH, day);
            dispose();
        }
    }

    private void btnYearBackMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnYearBackMousePressed
        startShifter(DateChooserDialog.YEAR_BACK);
    }//GEN-LAST:event_btnYearBackMousePressed

    private void btnYearBackMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnYearBackMouseReleased
        stopShifter();
    }//GEN-LAST:event_btnYearBackMouseReleased

    private void btnMonthBackMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMonthBackMousePressed
        startShifter(DateChooserDialog.MONTH_BACK);
    }//GEN-LAST:event_btnMonthBackMousePressed

    private void btnMonthBackMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMonthBackMouseReleased
        stopShifter();
    }//GEN-LAST:event_btnMonthBackMouseReleased

    private void btnMonthNextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMonthNextMousePressed
        startShifter(DateChooserDialog.MONTH_NEXT);
    }//GEN-LAST:event_btnMonthNextMousePressed

    private void btnMonthNextMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMonthNextMouseReleased
        stopShifter();
    }//GEN-LAST:event_btnMonthNextMouseReleased

    private void btnYearNextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnYearNextMousePressed
        startShifter(DateChooserDialog.YEAR_NEXT);
    }//GEN-LAST:event_btnYearNextMousePressed

    private void btnYearNextMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnYearNextMouseReleased
        stopShifter();
    }//GEN-LAST:event_btnYearNextMouseReleased

    private void initDateChooser() {
        calendar.setLenient(true);
        calendar.setTime(today);
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        startDate = today = calendar.getTime();
        calendar.set(Calendar.DAY_OF_MONTH, 1);
        fillPanel();
    }

    public void setColors() {
        pnlBorder.setBackground(borderBackground);
        pnlBorder.setForeground(borderForeground);
        fillPanel();
    }

    private void fillPanel() {
        month = calendar.get(Calendar.MONTH);
        year = calendar.get(Calendar.YEAR);

        pnlDays.removeAll();
        addHeadlineLabels();
        addDayLabels();
        pnlDays.repaint();
        lblMonthYear.setText(month + 1 + " / " + year);
    }

    private void addHeadlineLabels() {
        pnlDays.add(new WeekLabel("KW"));
        pnlDays.add(new DateChooserLabel("Mo"));
        pnlDays.add(new DateChooserLabel("Di"));
        pnlDays.add(new DateChooserLabel("Mi"));
        pnlDays.add(new DateChooserLabel("Do"));
        pnlDays.add(new DateChooserLabel("Fr"));
        pnlDays.add(new DateChooserLabel("Sa"));
        pnlDays.add(new DateChooserLabel("So"));
    }

    private void addDayLabels() {
        addFirstRowLabels();
        addFollowingLabels();
    }

    private void addFirstRowLabels() {
        addKwLabel();
        int wocht = calcWocht();
        for (int i = 1; i <= 7; i++) {
            if (i >= wocht) {
                addDayLabel();
            } else {
                addEmptyLabel();
            }
        }
    }

    private void addFollowingLabels() {
        while (month == calendar.get(Calendar.MONTH)) {
            addKwLabel();
            for (int i = 1; i <= 7; i++) {
                if (month == calendar.get(Calendar.MONTH)) {
                    addDayLabel();
                } else {
                    addEmptyLabel();
                }
            }
        }
        calendar.add(Calendar.MONTH, -1);
    }

    private void addKwLabel() {
        pnlDays.add(new WeekLabel("" + calendar.get(Calendar.WEEK_OF_YEAR)));
    }

    private void addDayLabel() {
        pnlDays.add(new DayLabel("" + calendar.get(Calendar.DATE)));
        calendar.add(Calendar.DATE, 1);
    }

    private void addEmptyLabel() {
        pnlDays.add(new JLabel(" "));
    }

    private int calcWocht() {
        int wocht = calendar.get(Calendar.DAY_OF_WEEK) - 1;
        return wocht == 0 ? 7 : wocht;
    }
    
    // 
    // Beginn der Shifter-logic.
    //
    private void startShifter(int shifter) {
        shifterThread = new Thread(new Shifter(shifter));
        shifterThread.start();
    }

    private void stopShifter() {
        shifterThread.interrupt();
    }

    class Shifter implements Runnable {

        private int shifter;
        private int counter;

        public Shifter(int shifter) {
            this.shifter = shifter;
        }

        @Override
        public void run() {
            while (true) {
                switch (shifter) {
                    case YEAR_BACK:
                        calendar.add(Calendar.YEAR, BACK);
                        break;
                    case YEAR_NEXT:
                        calendar.add(Calendar.YEAR, NEXT);
                        break;
                    case MONTH_BACK:
                        calendar.add(Calendar.MONTH, BACK);
                        break;
                    case MONTH_NEXT:
                        calendar.add(Calendar.MONTH, NEXT);
                        break;
                    default:
                        throw new AssertionError();
                }
                
                fillPanel();
                
                try {
                    int delay = counter++ < 5 ? 500 : 200;
                    Thread.sleep(delay);
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
                
                if (Thread.currentThread().isInterrupted()) {
                    break;
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnMonthBack;
    private javax.swing.JButton btnMonthNext;
    private javax.swing.JButton btnToday;
    private javax.swing.JButton btnYearBack;
    private javax.swing.JButton btnYearNext;
    private javax.swing.JLabel lblMonthYear;
    private javax.swing.JPanel pnlBorder;
    private javax.swing.JPanel pnlDays;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the calendar
     */
    public Calendar getCalendar() {
        return calendar;
    }

    /**
     * @param calendar the calendar to set
     */
    public void setCalendar(Calendar calendar) {
        this.calendar = calendar;
    }

    /**
     * @return the disposeOnSingleClick
     */
    public boolean isCloseOnDoubleClick() {
        return disposeOnSingleClick;
    }

    /**
     * @param disposeOnSingleClick the disposeOnSingleClick to set
     */
    public void setDisposeOnSingleClick(boolean disposeOnSingleClick) {
        this.disposeOnSingleClick = disposeOnSingleClick;
    }

    /**
     * @return the startDate
     */
    public Date getStartDate() {
        return startDate;
    }

    /**
     * @param startDate the startDate to set
     */
    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    /**
     * @return the borderBackground
     */
    public Color getBorderBackground() {
        return borderBackground;
    }

    /**
     * @param borderBackground the borderBackground to set
     */
    public void setBorderBackground(Color borderBackground) {
        this.borderBackground = borderBackground;
    }

    /**
     * @return the borderForeground
     */
    public Color getBorderForeground() {
        return borderForeground;
    }

    /**
     * @param borderForeground the borderForeground to set
     */
    public void setBorderForeground(Color borderForeground) {
        this.borderForeground = borderForeground;
    }

    /**
     * @return the headlineBackground
     */
    public Color getHeadlineBackground() {
        return headlineBackground;
    }

    /**
     * @param headlineBackground the headlineBackground to set
     */
    public void setHeadlineBackground(Color headlineBackground) {
        this.headlineBackground = headlineBackground;
    }

    /**
     * @return the headlineForeground
     */
    public Color getHeadlineForeground() {
        return headlineForeground;
    }

    /**
     * @param headlineForeground the headlineForeground to set
     */
    public void setHeadlineForeground(Color headlineForeground) {
        this.headlineForeground = headlineForeground;
    }

    /**
     * @return the weekBackground
     */
    public Color getWeekBackground() {
        return weekBackground;
    }

    /**
     * @param weekBackground the weekBackground to set
     */
    public void setWeekBackground(Color weekBackground) {
        this.weekBackground = weekBackground;
    }

    /**
     * @return the weekForeground
     */
    public Color getWeekForeground() {
        return weekForeground;
    }

    /**
     * @param weekForeground the weekForeground to set
     */
    public void setWeekForeground(Color weekForeground) {
        this.weekForeground = weekForeground;
    }

    /**
     * @return the weekendBackground
     */
    public Color getWeekendBackground() {
        return weekendBackground;
    }

    /**
     * @param weekendBackground the weekendBackground to set
     */
    public void setWeekendBackground(Color weekendBackground) {
        this.weekendBackground = weekendBackground;
    }

    /**
     * @return the weekendForeground
     */
    public Color getWeekendForeground() {
        return weekendForeground;
    }

    /**
     * @param weekendForeground the weekendForeground to set
     */
    public void setWeekendForeground(Color weekendForeground) {
        this.weekendForeground = weekendForeground;
    }

    /**
     * @return the dayBackground
     */
    public Color getDayBackground() {
        return dayBackground;
    }

    /**
     * @param dayBackground the dayBackground to set
     */
    public void setDayBackground(Color dayBackground) {
        this.dayBackground = dayBackground;
    }

    /**
     * @return the dayForeground
     */
    public Color getDayForeground() {
        return dayForeground;
    }

    /**
     * @param dayForeground the dayForeground to set
     */
    public void setDayForeground(Color dayForeground) {
        this.dayForeground = dayForeground;
    }

    /**
     * @return the startBackground
     */
    public Color getStartBackground() {
        return startBackground;
    }

    /**
     * @param startBackground the startBackground to set
     */
    public void setStartBackground(Color startBackground) {
        this.startBackground = startBackground;
    }

    /**
     * @return the startForeground
     */
    public Color getStartForeground() {
        return startForeground;
    }

    /**
     * @param startForeground the startForeground to set
     */
    public void setStartForeground(Color startForeground) {
        this.startForeground = startForeground;
    }

    /**
     * @return the activeBackground
     */
    public Color getActiveBackground() {
        return activeBackground;
    }

    /**
     * @param activeBackground the activeBackground to set
     */
    public void setActiveBackground(Color activeBackground) {
        this.activeBackground = activeBackground;
    }

    /**
     * @return the activeForeground
     */
    public Color getActiveForeground() {
        return activeForeground;
    }

    /**
     * @param activeForeground the activeForeground to set
     */
    public void setActiveForeground(Color activeForeground) {
        this.activeForeground = activeForeground;
    }

    class DateChooserLabel extends JLabel {

        private static final long serialVersionUID = 1L;

        public DateChooserLabel(String s) {
            super(s);
            setOpaque(true);
            setHorizontalAlignment(SwingConstants.CENTER);
            setBackground(headlineBackground);
            setForeground(headlineForeground);
        }

    }

    class WeekLabel extends DateChooserLabel {

        private static final long serialVersionUID = 1L;

        public WeekLabel(String s) {
            super(s);
            setBackground(weekBackground);
            setForeground(weekForeground);
        }

    }

    class DayLabel extends DateChooserLabel {

        private static final long serialVersionUID = 1L;
        private final int day;
        private Color background;
        private Color foreground;

        public DayLabel(String s) {
            super(s);
            day = Integer.parseInt(s);
            setAttributes();
            setDefaultColors();
            addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    dayLabelMouseCLicked(e);
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    setEnteredColors();
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    setDefaultColors();
                }
            });
        }

        private void setEnteredColors() {
            setBackground(activeBackground);
            setForeground(activeForeground);
        }

        private void setDefaultColors() {
            setBackground(background);
            setForeground(foreground);
        }

        private void setAttributes() {
            if (calendar.getTime().equals(today)) {
                setFont(new Font(getFont().getName(), Font.BOLD, getFont().getSize()));
            }
            if (calendar.getTime().equals(startDate)) {
                background = startBackground;
                foreground = startForeground;
            } else if (calcWocht() >= 6) {
                background = weekendBackground;
                foreground = weekendForeground;
            } else {
                background = dayBackground;
                foreground = dayForeground;
            }
        }

        public int getDay() {
            return day;
        }
    }
}
